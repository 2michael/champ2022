
Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаНачалаФактическая = ТекущаяДата();
	
КонецПроцедуры  // СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)

Процедура ВложенныйПроцессПередСозданиемВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
	
	СтартоватьНовыеДействия(ФормируемыеБизнесПроцессы, ТочкаМаршрутаБизнесПроцесса, Ложь);
		
КонецПроцедуры

Процедура ВложенныйПроцессПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	мин_ДатаНачалаПлановая        = Дата(1,1,1);
	макс_ДатаОкончанияПлановая    = Дата(1,1,1);
	
	мин_ДатаНачалаФактическая     = Дата(1,1,1);
	макс_ДатаОкончанияФактическая = Дата(1,1,1);
	
	Для Каждого СтрокаТаблицы Из Этапы Цикл
		
		//Расчет общих Плановых дат
		Если мин_ДатаНачалаПлановая = Дата(1,1,1) ИЛИ мин_ДатаНачалаПлановая > СтрокаТаблицы.ДатаНачалаПлановая Тогда
			мин_ДатаНачалаПлановая = СтрокаТаблицы.ДатаНачалаПлановая;
		КонецЕсли;
		
		Если макс_ДатаОкончанияПлановая < СтрокаТаблицы.ДатаОкончанияПлановая Тогда
			макс_ДатаОкончанияПлановая = СтрокаТаблицы.ДатаОкончанияПлановая;
		КонецЕсли;
		
		//Расчет общих Фактических дат
		Если мин_ДатаНачалаФактическая = Дата(1,1,1) ИЛИ (мин_ДатаНачалаФактическая > СтрокаТаблицы.ДатаНачалаФактическая И СтрокаТаблицы.ДатаНачалаФактическая <> Дата(1,1,1)) Тогда
			мин_ДатаНачалаФактическая = СтрокаТаблицы.ДатаНачалаФактическая;
		КонецЕсли;
		
		Если макс_ДатаОкончанияФактическая < СтрокаТаблицы.ДатаОкончанияФактическая Тогда
			макс_ДатаОкончанияФактическая = СтрокаТаблицы.ДатаОкончанияФактическая;
		КонецЕсли;
		
	КонецЦикла;  // Для Каждого СтрокаТаблицы Из СоставПроекта Цикл
	
	ДатаНачалаПлановая       = мин_ДатаНачалаПлановая;
	ДатаОкончанияПлановая    = макс_ДатаОкончанияПлановая;
	
	ДатаНачалаФактическая    = мин_ДатаНачалаФактическая;
	ДатаОкончанияФактическая = ?(Завершен, макс_ДатаОкончанияФактическая, Дата(1,1,1));
	
КонецПроцедуры  // ПередЗаписью(Отказ)

Процедура СтартоватьНовыеДействия(ФормируемыеБизнесПроцессы, ТочкаМаршрутаБизнесПроцесса, СтартоватьСразуПослеСоздания, ПослеПроцесса = Неопределено) Экспорт
		
	Попытка
		ВнешняяТранзакция = Истина;
		Если Не ТранзакцияАктивна() Тогда
			НачатьТранзакцию();
			ВнешняяТранзакция = Ложь;
		КонецЕсли;
		
		МассивЭтаповДляЗапуска = ЭтапыДляЗапуска(ПослеПроцесса);
		
		////для каждого этапа, который запускается, удалить признак перехода по нему
		//Для Каждого ЭтапДляЗапуска Из МассивЭтаповДляЗапуска Цикл
		//	Для Каждого Предшественник Из ПредшественникиЭтапов Цикл
		//		Если Предшественник.ИдентификаторПредшественника = ЭтапДляЗапуска.ИдентификаторЭтапа Тогда
		//			Предшественник.УсловныйПереходБылВыполнен = Ложь;
		//		КонецЕсли;
		//		Если Предшественник.ИдентификаторПоследователя = ЭтапДляЗапуска.ИдентификаторЭтапа Тогда
		//			Предшественник.УсловныйПереходБылВыполнен = Истина;
		//		КонецЕсли;
		//	КонецЦикла;
		//	ЭтапДляЗапуска.БезусловныйПереходКСледующемуБылВыполнен = Ложь;
		//КонецЦикла;
				
		Для Каждого ЭтапДляЗапуска Из МассивЭтаповДляЗапуска Цикл
			Попытка
				СоздатьПроцессПоЭтапу(ЭтапДляЗапуска, ФормируемыеБизнесПроцессы, ТочкаМаршрутаБизнесПроцесса, СтартоватьСразуПослеСоздания);
			Исключение
				Инфо = ИнформацияОбОшибке();
				Пока Инфо.Причина <> Неопределено Цикл
					Инфо = Инфо.Причина;
				КонецЦикла;
				Описание = Инфо.Описание;
				ТекстИсключения = "Эта задача не может быть выполнена."+Символы.ПС+Описание;
				ВызватьИсключение ТекстИсключения;
			КонецПопытки;
		КонецЦикла;
		
		Если МассивЭтаповДляЗапуска.Количество() Тогда
			Записать();
		КонецЕсли;
		
		Если Не ВнешняяТранзакция Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Исключение
		Если Не ВнешняяТранзакция Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки	
	
КонецПроцедуры

Функция ЭтапыДляЗапуска(ПослеПроцесса)
	
	МассивЭтаповДляЗапуска = Новый Массив();
	
	Если ПослеПроцесса = Неопределено Тогда
		
		Для Каждого ЭтапБизнесПроцесса Из Этапы Цикл
			
			Если ЗапускЭтапаПроцессаВозможен(ЭтапБизнесПроцесса, Ложь) Тогда
				МассивЭтаповДляЗапуска.Добавить(ЭтапБизнесПроцесса);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ЭтапПроцесса Из Этапы Цикл
			
			Если ЭтапПроцесса.ЗапущенныйБизнесПроцесс <> ПослеПроцесса Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Предшественник Из ЗависимостиЭтапов Цикл
				
				Если Предшественник.Этап <> ЭтапПроцесса.ЭтапПроекта Тогда
					Продолжить;
				КонецЕсли;
				
				ЭтапБизнесПроцесса = Этапы.Найти(Предшественник.ЗависимыйЭтап, "ЭтапПроекта");
				
				Если ЭтапБизнесПроцесса = Неопределено Тогда 
					
					//Если ВариантМаршрутизации <> Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
					//	Продолжить;
					//КонецЕсли;
					//
					//Индекс = Этапы.Индекс(ЭтапПроцесса);
					//
					//Если НЕ (Индекс < Этапы.Количество() - 1
					//		И ЗапускЭтапаПроцессаВозможен(Этапы[Индекс+1], Ложь)) Тогда
					//	
					//	Продолжить;
					//	
					//КонецЕсли;
					//
					//МассивЭтаповДляЗапуска.Добавить(Этапы[Индекс+1]);
					
				Иначе
					
					Если ЗапускЭтапаПроцессаВозможен(ЭтапБизнесПроцесса, Ложь) Тогда
						МассивЭтаповДляЗапуска.Добавить(ЭтапБизнесПроцесса);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивЭтаповДляЗапуска;
	
КонецФункции

 Функция ЗапускЭтапаПроцессаВозможен(ЭтапПроцесса, ТолькоПроверка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(ЭтапПроцесса.ЗапущенныйБизнесПроцесс) 
		И НЕ ЭтапПроцесса.ЗапущенныйБизнесПроцесс.Завершен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УсловияПереходаВыполнены = УсловияПереходаДляЭтапаВыполнены(ЭтапПроцесса, ТолькоПроверка);
	//Если СредиПредшественниковЭтапаЕстьТолькоТочкаСтарта(ЭтапПроцесса) Тогда	
	//	Возврат НЕ ЗначениеЗаполнено(ЭтапПроцесса.ЗапущенныйБизнесПроцесс) И УсловияПереходаВыполнены;
	//Иначе
		Возврат УсловияПереходаВыполнены;
	//КонецЕсли;
		
КонецФункции

// Проверяет, что для переданного этапа выполнены все условия для старта
// Параметры:
//	ЭтапПроцесса - строка табличной части Этапы
//	ТолькоПроверка - флаг, показывающий, что необходимо выполнить только проверку 
//	без установки отметок о проверке
Функция УсловияПереходаДляЭтапаВыполнены(ЭтапПроцесса, ТолькоПроверка)
	
	Результат = Ложь;
	
	МассивВлияющихЭтапов = ЗависимостиЭтапов.НайтиСтроки(Новый Структура("ЗависимыйЭтап", ЭтапПроцесса.ЭтапПроекта));
	
	Если МассивВлияющихЭтапов.Количество() = 0 Тогда
		
		Результат = Истина;
		
	Иначе
		
		ВсеВлияющиеЭтапыЗавершены = Истина;
		Для Каждого ЭлементВлияющийЭтап Из МассивВлияющихЭтапов Цикл
			
			МассивСтрокВлияющихЭтапав = Этапы.НайтиСтроки(Новый Структура("ЭтапПроекта", ЭлементВлияющийЭтап.Этап));
			Для Каждого СтрокаВлияющийЭтап Из МассивСтрокВлияющихЭтапав Цикл
				
				Если НЕ СтрокаВлияющийЭтап.ЗапущенныйБизнесПроцесс.ЗадачаВыполнена Тогда
					ВсеВлияющиеЭтапыЗавершены = Ложь;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Результат = ВсеВлияющиеЭтапыЗавершены;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Процедура для создания процессов в рамках комплексного процесса
// Параметры:
//	ЭтапДляЗапуска - строка табличной части Этапы
//	ФормируемыеБизнесПроцессы - массив созданных объектов бизнес-процессов
//	ТочкаМаршрутаБизнесПроцесса - точка маршрута комплексного процесса, на которой создаются новые процессы
//	СтартоватьСразу - флаг, показывающий, что созданный процесс необходимо немедленно стартовать
//
//	Флаг "СтартоватьСразу" необходимо устанавливать в Истина, если процессы создаются вручную при 
//	завершении очередного действия комплексного процесса. Значение Ложь необходимо установить, 
//	если старт вложенных процессов выполняется стандартным механизмом бизнес-процессов.
Процедура СоздатьПроцессПоЭтапу(ЭтапДляЗапуска, ФормируемыеБизнесПроцессы, ТочкаМаршрутаБизнесПроцесса, СтартоватьСразу)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтложенныйСтарт = Ложь; //(ЭтапДляЗапуска.ДатаНачалаПлановая > ТекущаяДата());
	
	БизнесПроцесс = БизнесПроцессы.БизнесПроцесс.СоздатьБизнесПроцесс();
	
	БизнесПроцесс.Дата = ТекущаяДатаСеанса();
	
	ЭтапДляЗапуска.ЗадачаВыполнена       = Ложь;
	ЭтапДляЗапуска.ДатаНачалаФактическая = БизнесПроцесс.Дата;
	
	// Если необходимо стартовать процесс сразу, то для него вручную создается ведущая задача
	Если СтартоватьСразу ИЛИ ОтложенныйСтарт Тогда
		ВедущаяЗадачаДействия = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ВедущаяЗадачаДействия.Дата = ТекущаяДатаСеанса();
		ВедущаяЗадачаДействия.БизнесПроцесс = Ссылка;
		ВедущаяЗадачаДействия.ТочкаМаршрута = ТочкаМаршрутаБизнесПроцесса;
		
		ВедущаяЗадачаДействия.Наименование          = "Задача БС: "+Ссылка.Наименование;
		ВедущаяЗадачаДействия.ДатаНачалаПлановая    = Ссылка.ДатаНачалаПлановая;
		ВедущаяЗадачаДействия.ДатаОкончанияПлановая = Ссылка.ДатаОкончанияПлановая;
		ВедущаяЗадачаДействия.ДатаНачалаФактическая = БизнесПроцесс.Дата;
		
		ВедущаяЗадачаДействия.Записать();
		БизнесПроцесс.ВедущаяЗадача = ВедущаяЗадачаДействия.Ссылка;
	КонецЕсли;
	
	БизнесПроцесс.Наименование          = ЭтапДляЗапуска.ЭтапПроекта.Наименование;
	БизнесПроцесс.ОбъектБизнесСобытие   = ЭтапДляЗапуска.ЭтапПроекта;
	БизнесПроцесс.Автор                 = ПараметрыСеанса.ТекущийПользователь;
	БизнесПроцесс.ДатаНачалаПлановая    = ЭтапДляЗапуска.ДатаНачалаПлановая;
	БизнесПроцесс.ДатаОкончанияПлановая = ЭтапДляЗапуска.ДатаОкончанияПлановая;
	БизнесПроцесс.ДатаНачалаФактическая = БизнесПроцесс.Дата;
	БизнесПроцесс.Записать();
	
	
	// Если необходимо стартовать процесс сразу, то выполняется его старт
	Если СтартоватьСразу ИЛИ ОтложенныйСтарт Тогда
		
		//Настройка = РегистрыСведений.ПроцессыДляЗапуска.ПолучитьСведенияОЗапускеПроцесса(
		//	БизнесПроцесс.Ссылка);
		//
		//Если ЗначениеЗаполнено(Настройка) Тогда
		//	БизнесПроцесс.ОтложенныйСтарт();
		//Иначе
			
			БизнесПроцесс.Старт();
			
		//КонецЕсли;
		
	КонецЕсли;
	
	ЭтапДляЗапуска.ЗапущенныйБизнесПроцесс = БизнесПроцесс.Ссылка;
	
	// Созданный процесс добавляется в массив - для предоставления возможности
	// запуска процесса платформенной механикой
	Если НЕ ОтложенныйСтарт Тогда
		ФормируемыеБизнесПроцессы.Добавить(БизнесПроцесс);
	КонецЕсли;
		
КонецПроцедуры

